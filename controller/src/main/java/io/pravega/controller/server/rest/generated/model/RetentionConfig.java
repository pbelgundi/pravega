/*
 * Pravega Controller APIs
 * List of admin REST APIs for the pravega controller service.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.pravega.controller.server.rest.generated.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModelProperty;


/**
 * RetentionConfig
 */

public class RetentionConfig   {
  /**
   * Indicates if retention is by space or time.
   */
  public enum TypeEnum {
    LIMITED_DAYS("LIMITED_DAYS"),
    
    LIMITED_SIZE_MB("LIMITED_SIZE_MB");

    private String minValue;
    private String maxValue;

    TypeEnum(String value) {
      this.minValue = value;
      this.maxValue = value;
    }

    TypeEnum(String min, String max) {
      this.minValue = min;
      this.maxValue = max;
    }

    @Override
    @JsonValue
    public String toString() {
      return "minLimit:" + String.valueOf(minValue) + "maxLimit:" + String.valueOf(maxValue);
    }

    @JsonCreator
    public static TypeEnum fromValue(String minVal, String maxVal) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.minValue).equals(minVal)
           && String.valueOf(b.maxValue).equals(maxVal)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("minValue")
  private Long minValue = null;

  @JsonProperty("maxValue")
  private Long maxValue = null;

  @JsonProperty("timeBasedRetention")
  private TimeBasedRetention timeBasedRetention = null;

  @JsonProperty("consumptionLimits")
  private ConsumptionLimits consumptionLimits = null;

  public RetentionConfig type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Indicates if retention is by space or time.
   * @return type
   **/
  @JsonProperty("type")
  @ApiModelProperty(value = "Indicates if retention is by space or time.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public RetentionConfig minValue(Long value) {
    this.minValue = value;
    return this;
  }

  public RetentionConfig maxValue(Long value) {
    this.maxValue = value;
    return this;
  }

  /**
   * Get Value
   * Value Represents number of days when type=LIMITED_DAYS
   * and retention size in MB when type=LIMITED_SIZE_MB
   * If type=LIMITED_DAYS and value=0, timeBasedRetention has the retention time.
   * @return value
   **/
  @JsonProperty("value")
  @ApiModelProperty(value = "")
  public Long getMinValue() {
    return minValue;
  }

  public void setMinValue(Long value) {
    this.minValue = value;
  }

  public RetentionConfig timeBasedRetention(TimeBasedRetention timeBasedRetention) {
    this.timeBasedRetention = timeBasedRetention;
    return this;
  }

  /**
   * Get retention duration in days, hours and minutes.
   * @return timeBasedRetention
   **/
  @JsonProperty("timeBasedRetention")
  @ApiModelProperty(value = "")
  public TimeBasedRetention getTimeBasedRetention() {
    return timeBasedRetention;
  }

  public void setTimeBasedRetention(TimeBasedRetention timeBasedRetention) {
    this.timeBasedRetention = timeBasedRetention;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetentionConfig retentionConfig = (RetentionConfig) o;
    return Objects.equals(this.type, retentionConfig.type) &&
        Objects.equals(this.minValue, retentionConfig.minValue) &&
        Objects.equals(this.maxValue, retentionConfig.maxValue) &&
        Objects.equals(this.timeBasedRetention, retentionConfig.timeBasedRetention);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, minValue, maxValue, timeBasedRetention, consumptionLimits);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetentionConfig {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    minvalue: ").append(toIndentedString(minValue)).append("\n");
    sb.append("    maxvalue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    timeBasedRetention: ").append(toIndentedString(timeBasedRetention)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

